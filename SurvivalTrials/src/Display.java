import java.awt.Color;

import javax.swing.text.*;


public class Display extends javax.swing.JFrame {

    /**
     * Creates new form Display
     */
    public Display() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MapPanel = new javax.swing.JPanel();
        MapDisplay = new javax.swing.JTextPane();
        MessagePanel = new javax.swing.JPanel();
        MessageConsole = new javax.swing.JScrollPane();
        CodePanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        MapDisplay.setBackground(new java.awt.Color(1, 1, 1));
        MapDisplay.setFont(new java.awt.Font("Courier New", 0, 8)); // NOI18N

        javax.swing.GroupLayout MapPanelLayout = new javax.swing.GroupLayout(MapPanel);
        MapPanel.setLayout(MapPanelLayout);
        MapPanelLayout.setHorizontalGroup(
            MapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MapPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MapDisplay)
                .addContainerGap())
        );
        MapPanelLayout.setVerticalGroup(
            MapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MapDisplay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
        );

        MessageConsole.setBackground(new java.awt.Color(255, 255, 255));
        MessageConsole.setBorder(null);

        javax.swing.GroupLayout MessagePanelLayout = new javax.swing.GroupLayout(MessagePanel);
        MessagePanel.setLayout(MessagePanelLayout);
        MessagePanelLayout.setHorizontalGroup(
            MessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MessagePanelLayout.createSequentialGroup()
                .addComponent(MessageConsole, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        MessagePanelLayout.setVerticalGroup(
            MessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MessageConsole, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout CodePanelLayout = new javax.swing.GroupLayout(CodePanel);
        CodePanel.setLayout(CodePanelLayout);
        CodePanelLayout.setHorizontalGroup(
            CodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 172, Short.MAX_VALUE)
        );
        CodePanelLayout.setVerticalGroup(
            CodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MessagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CodePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(MapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MessagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(CodePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void start(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Display().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CodePanel;
    private javax.swing.JTextPane MapDisplay;
    private javax.swing.JPanel MapPanel;
    private javax.swing.JScrollPane MessageConsole;
    private javax.swing.JPanel MessagePanel;
    // End of variables declaration//GEN-END:variables

    
  //TODO REWRITE TO MAKE FASTER
  public void display(World test) throws BadLocationException {
	  	MapDisplay.setText("");
	    Document temp = MapDisplay.getDocument();
	    Document blank = new DefaultStyledDocument();
	    MapDisplay.setDocument(blank);
        for (int i = 0; i < test.world.length; i++) {
            for (int j = 0; j < test.world[0].length; j++) {
            	addSpace(temp, " ");
                if (test.world[j][i].creature != null && test.world[j][i].creature.creatureType != 0) {
                    appendCreature(temp, D.stringifyCreature(test.world[j][i].creature), test.world[j][i].creature.creatureType);
                } else if (test.world[j][i].structure != 0) {
                    appendStructure(D.stringifyStructure(test.world[j][i].structure), 0);
                } else if (test.world[j][i].item[0] != 0) {
                    appendItem(D.stringifyItem(test.world[j][i].item[0]), 0);
                } else {
                	appendLand(temp, D.stringifyLand(test.world[j][i].landType), test.world[j][i].landType);
                }
                addSpace(temp, " ");
            }
            addSpace(temp, "\n");
        }
	    MapDisplay.setDocument(temp);
    }

    public void appendLand(Document tempDoc, String str, int type) throws BadLocationException {
        StyledDocument document = (StyledDocument) MapDisplay.getDocument();
        Style blank = MapDisplay.addStyle("blank", null);
        StyleConstants.setForeground(blank, Color.white);
        Style saltwater = MapDisplay.addStyle("saltwater", null);
        StyleConstants.setForeground(saltwater, Color.blue);
        Color waterC = new Color(156, 245, 245);
        Style water = MapDisplay.addStyle("water", null);
        StyleConstants.setForeground(water, waterC);
        Style land = MapDisplay.addStyle("land", null);
        //Color dkGreen = Color.green.darker();
        StyleConstants.setForeground(land, Color.green.darker());
        
        switch (type) {
            case D.SALTWATER:
            	tempDoc.insertString(tempDoc.getLength(), str, saltwater);
                break;
            case D.NONE:
            	tempDoc.insertString(tempDoc.getLength(), str, land);
                break;
            case D.WATER:
            	tempDoc.insertString(tempDoc.getLength(), str, water);
                break;
            default:
            	tempDoc.insertString(tempDoc.getLength(), str, null);
                break;
        }
    }
    
    public void appendCreature(Document tempDoc, String str, int type) throws BadLocationException {
        StyledDocument document = (StyledDocument) MapDisplay.getDocument();
        Style blank = MapDisplay.addStyle("blank", null);
        StyleConstants.setForeground(blank, Color.white);
        
        switch (type) {
            case D.NONE:
            	tempDoc.insertString(tempDoc.getLength(), str, blank);
                break;
            default:
            	tempDoc.insertString(tempDoc.getLength(), str, null);
                break;
        }
    }
    
    public void appendStructure(String str, int type) throws BadLocationException {
        StyledDocument document = (StyledDocument) MapDisplay.getDocument();
        Style blank = MapDisplay.addStyle("blank", null);
        StyleConstants.setForeground(blank, Color.white);
        
        switch (type) {
            case D.NONE:
                document.insertString(document.getLength(), str, blank);
                break;
            default:
                document.insertString(document.getLength(), str, null);
                break;
        }
    }
    
    public void appendItem(String str, int type) throws BadLocationException {
        StyledDocument document = (StyledDocument) MapDisplay.getDocument();
        Style blank = MapDisplay.addStyle("blank", null);
        StyleConstants.setForeground(blank, Color.white);
        
        switch (type) {
            case D.NONE:
                document.insertString(document.getLength(), str, blank);
                break;
            default:
                document.insertString(document.getLength(), str, null);
                break;
        }
    }
    
    public void addSpace(Document tempDoc, String str) throws BadLocationException {
        StyledDocument document = (StyledDocument) MapDisplay.getDocument(); 
        tempDoc.insertString(tempDoc.getLength(), str, null);
    }
}
